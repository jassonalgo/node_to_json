<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_entity_presave().
 * generates a json file after saving or updating a node
 */
function node_to_json_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  /*
      // Get the current user
      $user = \Drupal::currentUser();
      // Check for permission
      $perm = $user->hasPermission('create json file from node');
      if($perm){
      }else{
      }
  */
  //get the module config
  $default_config = \Drupal::config('node_to_json.settings');
  $path = $default_config->get('node_to_json.path');
  $contentType = $default_config->get('node_to_json.content');

  $data = [];
  $data['data'] = [];
  $imageJson = [];

  //get preset images
  $imageStyles = ImageStyle::loadMultiple();
  $presetName = [];

  //the type of entity is validated
  if (array_key_exists($entity->bundle(), $contentType)) {
    //get common fields
    //dpm(($entity->id()));
    $title = $entity->getTitle();
    $data['data']['title'] = $title;
    //$data['data']['body'] = $entity->get('body')->value;
    $data['data']['created'] = $entity->getCreatedTime();
    $data['data']['updated'] = $entity->getChangedTime();
    $data['data']['lastModifiedBy'] = $entity->getRevisionAuthor()->getUsername();

    $fileNameType = $contentType[$entity->bundle()]['file_name'];
    //get particular fields
    foreach ($contentType[$entity->bundle()]['fields'] as $keyField => $nameField) {
      //get field type
      $fieldType = $entity->get($nameField)->getFieldDefinition()->getType();
      switch ($fieldType) {
      case 'text_with_summary':
        $valueField = $entity->get($nameField)->getValue();
        $data['data'][$nameField] = $valueField[0]['value'];
        break;
      case 'string':
        $valueField = $entity->get($nameField)->getValue();
        $data['data'][$nameField] = $valueField[0]['value'];
        break;
      case 'image':
        //validate if file image exist
        if ($entity->hasField($nameField) && !empty($entity->get($nameField)->getValue())) {
          $imageData = $entity->get($nameField)->getValue();
          //validate image metada
          if (is_array($imageData) && array_key_exists('title', $imageData[0]) && !empty($imageData[0]['title'])) {
            $imageJson['title'] = $imageData[0]['title'];
          } else {
            $imageJson['title'] = $title;
          }
          if (is_array($imageData) && array_key_exists('alt', $imageData[0]) && !empty($imageData[0]['alt'])) {
            $imageJson['alt'] = $imageData[0]['alt'];
          } else {
            $imageJson['alt'] = $title;
          }
          //validate if data have fid
          if (is_array($imageData) && array_key_exists('target_id', $imageData[0])) {
            // get file data
            $imageJson['preset'] = [];
            $file = \Drupal\file\Entity\File::load($imageData[0]['target_id']);
            //go over preset image array
            foreach ($imageStyles as $key => $value) {
              $style = \Drupal::entityTypeManager()->getStorage('image_style')->load($value->getName());
              //get url image whit preset
              $url = $style->buildUrl($file->getFileUri());
              $imageJson['preset'][$value->getName()] = $url;
            }
            $imageJson['absolutePath'] = file_create_url($file->getFileUri());
          } else {}
        }
        //validate if image is not empty
        if (!empty($imageJson)) {
          $data['data']['image'] = [];
          $data['data']['image'] = $imageJson;
        }
        break;
      }
    }

    $path = "public://" . $path;
    switch ($fileNameType) {
      case 'nid':
        $fileName = $entity->id();
        break;
      case 'title':
        $fileName = slugify($title);
        break;
    }
    $fullPath = $path . "/" .$fileName . ".json";
    //validate if folder exists and is writable
    if (file_prepare_directory($path, FILE_MODIFY_PERMISSIONS)) {
      //create file
      $file = file_save_data(json_encode($data, JSON_UNESCAPED_SLASHES), $fullPath, FILE_EXISTS_REPLACE);
      if (is_object($file)) {
        drupal_set_message(t("Json @path file created successfully", array('@path' => $fullPath )), 'status');
      } else {
        drupal_set_message(t("Error in file creation"), 'error');
      }
    } else {
      drupal_set_message(t("the folder dont have the rigth permissions"), 'error');
    }
  }else{

  }
  /*

      switch ($entity->bundle()) {
        // Here you modify only your day content type
        case 'static_pages':

          break;
  */
}

/**
 * Implements hook_help().
 */
function node_to_json_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
  case 'help.page.node_to_json':
    return t('
        <h2>Node to json.</h2>
        <h3>Description</h3>
        <p>This module allows you to create json files based on the nodes</p>
        <h3>Instructions</h3>
        <p>After saving or updating a content, a json will be created according to these rules (defined in the module\'s administrative menu)</p>
        <ul>
          <li>the content is valid to generate json</li>
          <li>only the specified fields are exported in the json</li>
        </ul>
      ');
  }
}

// This function expects the input to be UTF-8 encoded.
function slugify($text)
{
    // Swap out Non "Letters" with a -
    $text = preg_replace('/[^\\pL\d]+/u', '-', $text);

    // Trim out extra -'s
    $text = trim($text, '-');

    // Convert letters that we have left to the closest ASCII representation
    $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);

    // Make text lowercase
    $text = strtolower($text);

    // Strip out anything we haven't been able to convert
    $text = preg_replace('/[^-\w]+/', '', $text);

    return $text;
}

?>
