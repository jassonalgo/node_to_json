<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_entity_presave().
 */
function node_to_json_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  //get the module config
  $default_config = \Drupal::config('node_to_json.settings');
  $path = $default_config->get('node_to_json.path');
  $data = [];
  $imageJson = [];
  //get preset images
  $imageStyles = ImageStyle::loadMultiple();
  $presetName = [];
  //the type of entity is validated
  switch ($entity->bundle()) {
    // Here you modify only your day content type
    case 'static_pages':
      //get data
      if($entity->hasField('field_json_file_name')){
        $title = $entity->get('field_json_file_name')->value;
      }else{
        $title = $entity->getTitle();
      }
      //validate if file image exist
      if($entity->hasField('field_static_image')){
        $imageData = $entity->get('field_static_image')->getValue();
        //validate image metada
        if(is_array($imageData) && array_key_exists('title', $imageData[0]) && !empty($imageData[0]['title'])){
          $imageJson['title'] = $imageData[0]['title'];
        }else{
          $imageJson['title'] = $entity->getTitle();
        }
        if(is_array($imageData) && array_key_exists('alt', $imageData[0]) && !empty($imageData[0]['alt'])){
          $imageJson['alt'] = $imageData[0]['alt'];
        }else{
          $imageJson['alt'] = $entity->getTitle();
        }
        //validate if data have fid
        if(is_array($imageData) && array_key_exists('target_id', $imageData[0])){
          // get file data
          $imageJson['preset'] = [];
          $file = \Drupal\file\Entity\File::load( $imageData[0]['target_id']);
          //go over preset image array
          foreach ($imageStyles as $key => $value) {
            $style = \Drupal::entityTypeManager()->getStorage('image_style')->load($value->getName());
            //get url image whit preset
            $url = $style->buildUrl($file->getFileUri());
            $imageJson['preset'][$value->getName()] = $url;
          }
          //get local path
          $imageJson['localPath'] =  $file->getFileUri();
          $imageJson['absolutepath'] = file_create_url($file->getFileUri());
        }else{}
      }

      $data['body'] = $entity->get('body')->value;
      $data['image'] = $imageJson;
      //create file
      $file = file_save_data(json_encode($data, JSON_UNESCAPED_SLASHES), "public://".$path."/".$title.".json", FILE_EXISTS_REPLACE);
      if (is_object($file)) {
        drupal_set_message(t("File created successfully"), 'status');
      }
      else {
        drupal_set_message(t("Error in file creation"), 'error');
      }
      break;
  }
}

/**
 * Implements hook_help().
 */
function node_to_json_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.node_to_json':
      return t('
        <h2>Node to json.</h2>
        <h3>Description</h3>
        <p>This module allows you to create json files based on the nodes</p>
        <h3>Instructions</h3>
        <pafter updating or creating a node, a json file will be created in the path defined in the administration interface (in construction) following the rules defined in it</p>
      ');
  }
}

?>
